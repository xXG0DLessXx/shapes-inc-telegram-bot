---

# Define a common base configuration for all bot services
x-common-bot-config: &common-bot-config
  build: . # Build the image from the Dockerfile in the current directory
  restart: unless-stopped
  # Removed network_mode: "host". We'll use a custom bridge network.
  networks:
    - telegram_bots_network # Assign all bots to this custom network
  deploy: # Resource limits and reservations
    resources:
      limits:
        cpus: '0.50' # Limit to 50% of one CPU core
        memory: '256M' # Limit memory usage to 256 MB
      #reservations: # Optional: Guarantee these resources
      #  cpus: '0.25' # Reserve 25% of one CPU core
      #  memory: '128M' # Reserve 128 MB of memory
  #logging: # Configure logging for containers
  #  driver: "json-file" # Default, but can be explicit
  #  options:
  #    max-size: "10m"   # Max size of a log file before rotation
  #    max-file: "3"     # Max number of log files to keep

  # This tells bot.py where to create the database file *inside* the container.
  # The path is the same for all bots, but the volume mount will make the
  # actual storage unique for each.
  environment:
    - DATABASE_PATH=/app/data/bot_database.db

services:
  # --- Bot Instance 1: Nova ---
  bot-nova-ai:
    <<: *common-bot-config # Inherit common configuration
    container_name: telegram_bot_nova-ai
    restart: unless-stopped
    env_file:
      - common.env  # Loads common settings
      - nova-ai.env    # Loads Nova's specific settings (and overrides common if needed)
    # NO 'environment' block needed here for BOT_TOKEN or SHAPESINC_SHAPE_USERNAME
    # unless you want to override something from nova-ai.env for a quick test,
    # but generally keep secrets out of here.
    
    # This binds 'nova_data' in the current directory to the '/app/data' directory in the container
    volumes:
      - ./nova_data:/app/data

  # --- Bot Instance 2: Amy ---
  bot-discordaddictamy:
    <<: *common-bot-config # Inherit common configuration
    container_name: telegram_bot_discordaddictamy
    restart: unless-stopped
    env_file:
      - common.env
      - discordaddictamy.env
    volumes:
      - ./amy_data:/app/data

  # --- Add more bot instances as needed ---
  # bot-anotherone:
  #   <<: *common-bot-config # Inherit common configuration
  #   container_name: telegram_bot_anotherone
  #   restart: unless-stopped
  #   env_file:
  #     - common.env
  #     - anotherone.env

# Define custom networks
networks:
  telegram_bots_network:
    driver: bridge # Use the default bridge driver
    name: telegram_bots_network # Give the network a custom name

# The 'volumes: - ./logs:/app/logs' from your original docker-compose.yml
# was an example. Your bot currently logs to standard output (stdout/stderr),
# which Docker captures automatically. You can view logs using `docker logs <container_name>`.
# If you wanted each bot to write to separate log files on the host, you'd need
# to configure volumes like:
# volumes:
#   - ./nova_logs:/app/logs # For bot-nova
#   - ./amy_logs:/app/logs  # For bot-amy
# And potentially modify bot.py to write to a file like /app/logs/bot.log,
# or even better, /app/logs/${SHAPESINC_SHAPE_USERNAME}.log.
# For simplicity, relying on Docker's stdout/stderr logging is recommended.